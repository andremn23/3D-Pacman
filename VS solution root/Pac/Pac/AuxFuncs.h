#ifndef _AUXFUNCS_H__
#define _AUXFUNCS_H__
#pragma once

const int path [33][30] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0 ,0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
					 0, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4 ,4, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 0, 
					 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0 ,0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0 ,0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0 ,0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0 ,0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0 ,0, 0, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0 ,0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0 ,0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0,
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 1, 0, 4, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 4, 0, 1, 0, 0,
					 0, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 4, 0,
					 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0,
					 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0,
					 0, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 1, 0, 0,
					 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

const int pathFood [33][30] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0 ,0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
					 0, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 4 ,4, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 0, 
					 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0 ,0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0 ,0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0 ,0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0,
					 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 2, 0, 4, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 1, 0, 0, 4, 0, 2, 0, 0,
					 0, 0, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 4, 0,
					 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0,
					 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 4, 0, 0,
					 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 4, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 1, 0, 0,
					 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
					 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
					 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

//Funçao que converte a posição y do pacman na respectiva posição da matriz
int convertePacX(float pacX, float pacY);
//Funçao que converte a posição x do pacman na respectiva posição da matriz
int convertePacY(float pacX, float pacY);
//Devolve a casa decimal das variavel pacX ou pacY (para calcular as curvas)
int casaDecimal(float pacx);
//Ajusta a casa decimal do pacman para os valores pretendidos
float adjust(float x);
bool isWall(float x, float y);
int getRand();


#endif